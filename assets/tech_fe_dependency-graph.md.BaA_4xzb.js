/* empty css                                                               */import{_ as e,c as s,o as a,aa as i}from"./chunks/framework.CeN9Tan-.js";const b=JSON.parse('{"title":"依赖关系图","description":null,"frontmatter":{"description":null,"layoutClass":"fuye-single-page-layout","outline":[2,3,4]},"headers":[],"relativePath":"tech/fe/dependency-graph.md","filePath":"tech/fe/dependency-graph.md"}'),n={name:"tech/fe/dependency-graph.md"},l=i(`<h1 id="依赖关系图" tabindex="-1">依赖关系图 <a class="header-anchor" href="#依赖关系图" aria-label="Permalink to &quot;依赖关系图&quot;">​</a></h1><p>Webpack 的依赖关系图（Dependency Graph）是其核心机制，用于管理和优化模块间的依赖关系。</p><p>依赖关系图是 Webpack 从 <strong>入口文件（Entry）</strong> 开始，通过递归分析模块间的引用关系（如 <code>import</code>、 <code>require</code> ）构建的树状结构。该图包含应用程序所需的所有模块（JavaScript、CSS、图片等），并最终将这些模块打包为 Bundle 文件。</p><p>Webpack 的模块解析基于 enhanced-resolve 库实现，支持多种模块类型（ES6、CommonJS、AMD、Assets 等）和路径解析规则。</p><h2 id="构建过程" tabindex="-1">构建过程 <a class="header-anchor" href="#构建过程" aria-label="Permalink to &quot;构建过程&quot;">​</a></h2><ul><li><strong>入口解析</strong>：Webpack 从配置的入口文件（如 <code>entry: &#39;./src/index.js&#39;</code> ）开始，识别其直接依赖的模块（如通过 <code>import</code> 引入的模块）。</li><li><strong>递归遍历</strong>：每个模块的依赖会被进一步解析，形成递归遍历。例如，若 <code>index.js</code> 依赖 <code>utils.js</code> ，而 <code>utils.js</code> 又依赖 <code>lodash</code> ，Webpack 会依次将三者加入依赖图。</li><li><strong>AST 分析与依赖收集</strong>：借助 <code>@babel/parser</code> 生成抽象语法树（AST），再通过 <code>@babel/traverse</code> 提取模块中的依赖路径，最终生成完整的依赖关系图。</li><li><strong>代码转换与打包</strong>：使用 Loader 转换非 JavaScript 模块（如 <code>CSS</code>、<code>TypeScript</code>），并通过插件（Plugins）优化代码结构，最终生成 Bundle。</li></ul><h2 id="依赖图的作用" tabindex="-1">依赖图的作用 <a class="header-anchor" href="#依赖图的作用" aria-label="Permalink to &quot;依赖图的作用&quot;">​</a></h2><ul><li><strong>代码分割（Code Splitting）</strong>：将依赖图拆分为多个 Bundle，按需加载以减少初始加载时间。例如，通过动态导入（ <code>import()</code> ）实现按需加载。</li><li><strong>优化 HTTP 请求</strong>：对 HTTP/1.1 应用，合并模块减少请求次数；对 HTTP/2 应用，利用代码分割进一步优化并行加载。</li><li><strong>缓存机制</strong>：基于模块内容哈希生成文件名，结合持久化缓存（Webpack 5+特性）提升重复构建效率。</li></ul><h2 id="可视化工具" tabindex="-1">可视化工具 <a class="header-anchor" href="#可视化工具" aria-label="Permalink to &quot;可视化工具&quot;">​</a></h2><p>通过 <code>webpack-bundle-analyzer</code> 插件，可将依赖图以交互式树状图展示，直观显示各模块体积及依赖关系，帮助开发者优化 Bundle 结构。</p><p>配置示例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BundleAnalyzerPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpack-bundle-analyzer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).BundleAnalyzerPlugin;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BundleAnalyzerPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="模块解析规则" tabindex="-1">模块解析规则 <a class="header-anchor" href="#模块解析规则" aria-label="Permalink to &quot;模块解析规则&quot;">​</a></h2><p>Webpack 的 Resolvers 负责解析模块路径，支持以下特性：</p><ul><li><strong>别名（Alias）</strong>：通过 <code>resolve.alias</code> 简化路径引用（如 <code>@: &#39;./src&#39;</code> ）；</li><li><strong>扩展名自动补全</strong>：默认补全 <code>.js</code> 、 <code>.json</code> 等后缀；</li><li><strong>模块优先级</strong>：按 <code>resolve.modules</code> 配置的目录顺序查找模块。</li></ul>`,15),t=[l];function r(o,d,p,c,h,k){return a(),s("div",null,t)}const y=e(n,[["render",r]]);export{b as __pageData,y as default};
