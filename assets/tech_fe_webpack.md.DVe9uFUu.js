/* empty css                                                               */import{_ as e,c as a,o as i,aa as s}from"./chunks/framework.CeN9Tan-.js";const l="/assets/webpack.BmdpJ90J.jpg",m=JSON.parse('{"title":"Webpack","description":null,"frontmatter":{"description":null,"layoutClass":"fuye-single-page-layout","outline":[2,3,4]},"headers":[],"relativePath":"tech/fe/webpack.md","filePath":"tech/fe/webpack.md"}'),o={name:"tech/fe/webpack.md"},t=s('<h1 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h1><p>Webpack 是一款<strong>静态模块打包工具</strong> ，主要用于现代 <a href="./javascript"><code>JavaScript</code></a> 应用程序的开发。其核心功能是通过分析项目的<a href="./dependency-graph">依赖关系图</a>，将各种资源（如 <a href="./javascript"><code>JavaScript</code></a>、<a href="./css"><code>CSS</code></a>、<a href="./image">图片</a>等）转换为浏览器可识别的优化后的静态文件（Bundle）。</p><p><a target="_blank" rel="noopener noreferrer" href="https://webpack.js.org/?utm_source=jianghuliaoit" class="fuye-button medium brand">链接直达 -&gt;</a></p><p><img src="'+l+`" alt="webpack" loading="lazy"></p><h2 id="应用特点" tabindex="-1">应用特点 <a class="header-anchor" href="#应用特点" aria-label="Permalink to &quot;应用特点&quot;">​</a></h2><ol><li><p><strong>模块化支持</strong></p><ul><li>支持 <a href="./es6"><code>ES6</code></a>、<a href="./module-specifications#commonjs"><code>CommonJS</code></a>、<a href="./module-specifications#amd-asynchronous-module-definition"><code>AMD</code></a> 等<a href="./module-specifications">前端模块规范</a>，所有文件（包括非 <a href="./javascript"><code>JavaScript</code></a> 资源）均可视为模块处理。</li></ul></li><li><p><strong>代码转换与优化</strong></p><ul><li>通过 <a href="./webpack-loader"><code>Loader</code></a> 和 <a href="./webpack-plugin"><code>Plugin</code></a> 处理文件（如将 <a href="./typescript"><code>TypeScript</code></a> 转 <a href="./javascript"><code>JavaScript</code></a>、<a href="./sass"><code>Sass</code></a> 转 <a href="./css"><code>CSS</code></a>），并支持 <a href="./tree-shaking"><code>Tree Shaking</code></a> 删除未使用代码。</li></ul></li><li><p><strong>动态加载与代码分割</strong></p><ul><li>支持<a href="./load-on-demand">按需加载</a>代码块（Chunk），减少<a href="./first-screen-loading-time">首屏加载时间</a>。</li></ul></li></ol><h2 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h2><p>Webpack 工作流程是通过 <a href="./tapable">Tapable 插件系统</a>实现各阶段的钩子触发：</p><ol><li><p><strong>初始化参数</strong></p><ul><li>合并命令行参数和配置文件 <code>webpack.config.js</code>，生成最终配置对象。</li></ul></li><li><p><strong>编译准备</strong></p><ul><li>创建 Compiler 实例，加载所有配置的插件（如 <code>HtmlWebpackPlugin</code>），并执行插件的 <code>apply</code> 方法注册钩子。</li></ul></li><li><p><strong>模块解析与依赖图构建</strong></p><ul><li>从入口文件 <code>entry</code> 开始，递归解析 <code>import/require</code> 语句，生成<a href="./dependency-graph">模块依赖关系图</a>（<code>Dependency Graph</code>）。</li><li>对每个模块根据 <code>test</code> 规则匹配对应的Loader（如 <code>.js</code> 用 <code>babel-loader</code> ），将非 JavaScript 文件转换为 Webpack 可识别的模块。</li></ul></li><li><p><strong>代码生成与优化</strong></p><ul><li>根据依赖图生成Chunk（代码块），应用 <code>SplitChunksPlugin</code> 等优化策略分割代码；</li><li>执行 <code>TerserPlugin</code> 压缩代码，触发 <a href="./tree-shaking">Tree Shaking</a> 删除未使用代码。</li></ul></li><li><p><strong>输出文件</strong></p><ul><li>将处理后的代码块（Chunk）写入 <code>output</code> 配置的目录，生成 bundle.js 及附属资源（如CSS、图片）。</li><li>掌握流程可定位构建卡顿点（如某个 Loader 耗时过长）并优化配置。</li></ul></li></ol><h2 id="核心机制" tabindex="-1">核心机制 <a class="header-anchor" href="#核心机制" aria-label="Permalink to &quot;核心机制&quot;">​</a></h2><ol><li><p><strong>模块化处理机制</strong></p><ul><li><strong>一切（文件）皆模块</strong>：通过 <code>__webpack_require__</code> 函数模拟 CommonJS 环境，实现模块作用域隔离；</li><li>打包后的代码结构为立即执行函数，接收模块数组参数，每个模块被包裹为函数形式。</li></ul></li><li><p><strong>Loader工作原理</strong></p><ul><li><strong>链式调用</strong>：Loader 数组从右向左执行（如 <code>[&#39;style-loader&#39;, &#39;css-loader&#39;]</code>）,中先处理CSS再注入样式）；</li><li>输入为文件内容，输出为 JavaScript 代码字符串（如将 Sass 转换为 CSS 再嵌入 JavaScript）。</li></ul></li><li><p><strong>Plugin工作原理</strong></p><ul><li><strong>基于<a href="./../computer-basic/design-patterns">发布订阅模式</a></strong>：通过 <code>compiler.hooks.emit.tap()</code> 在特定生命周期注入自定义逻辑（如压缩、生成HTML）；</li><li><strong>常用插件</strong>：<code>HotModuleReplacementPlugin</code> （热更新）、<code>CleanWebpackPlugin</code>（清理旧文件）。</li></ul></li></ol><p>通过配置关键模块优化开发体验（如缩短构建时间）。</p><h2 id="关键配置" tabindex="-1">关键配置 <a class="header-anchor" href="#关键配置" aria-label="Permalink to &quot;关键配置&quot;">​</a></h2><table><thead><tr><th>模块</th><th>作用与配置示例</th></tr></thead><tbody><tr><td><code>Entry</code></td><td>指定构建起点，支持多入口：<code>entry: { app: &#39;./src/app.js&#39;, admin: &#39;./src/admin.js&#39; }</code></td></tr><tr><td><code>Output</code></td><td>定义输出路径及文件名：<code>filename: &#39;[name].[contenthash:8].js&#39;</code> （哈希缓存优化）</td></tr><tr><td><code>Loaders</code></td><td>处理非JS资源，如：<code>{ test: /\\.css$/, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] }</code></td></tr><tr><td><code>Plugins</code></td><td>扩展功能，如 <code>new HtmlWebpackPlugin({ template: &#39;./public/index.html&#39; })</code></td></tr><tr><td><code>Resolve</code></td><td>配置模块解析规则，如别名：<code> alias: { &#39;@&#39;: path.resolve(__dirname, &#39;src&#39;) }</code></td></tr></tbody></table><h2 id="构建产物查看与分析" tabindex="-1">构建产物查看与分析 <a class="header-anchor" href="#构建产物查看与分析" aria-label="Permalink to &quot;构建产物查看与分析&quot;">​</a></h2><ol><li><p><strong>产物生成与查看</strong></p><ul><li><strong>输出位置</strong>：默认生成在 <code>dist/</code> 目录，可通过 <code>output.path</code> 自定义；</li><li><strong>开发环境</strong>：使用 <code>webpack-dev-server</code> 生成内存文件，支持实时刷新；</li><li><strong>生产环境</strong>：生成优化后的文件（如 <code>.js</code> 压缩、 <code>.css</code> 提取）。</li></ul></li><li><p><strong>产物分析方法</strong></p><ul><li><strong>基础分析</strong>：运行 <code>webpack --profile --json &gt; stats.json</code> 生成构建统计文件，用 <a href="https://webpack.github.io/analyse/" target="_blank" rel="noreferrer">Webpack Analyse</a> 可视化依赖关系</li><li><strong>深度分析工具</strong>： <ul><li><a href="./webpack-plugin#webpack-bundle-analyzer">webpack-bundle-analyzer</a>：生成交互式树状图，展示各模块体积占比：</li><li><a href="./webpack-plugin#speed-measure-webpack-plugin">speed-measure-webpack-plugin</a>：测量各 <code>Loader/Plugin</code> 耗时，优化构建速度。</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm i webpack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bundle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">analyzer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 配置webpack.config.js </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BundleAnalyzerPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpack-bundle-analyzer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).BundleAnalyzerPlugin; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BundleAnalyzerPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](@ref)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h2 id="优化实践建议" tabindex="-1">优化实践建议 <a class="header-anchor" href="#优化实践建议" aria-label="Permalink to &quot;优化实践建议&quot;">​</a></h2><ol><li><p><strong>构建速度优化</strong></p><ul><li>缩小 Loader 作用范围：<code>exclude: /node_modules/</code>；</li><li>使用缓存：<code>babel-loader?cacheDirectory</code> 或 <code>cache-loader</code>；</li><li>多进程并行：<code>thread-loader</code> 或 <code>HappyPack</code>（Webpack 5推荐前者）。</li></ul></li><li><p><strong>产物体积优化</strong></p><ul><li>代码分割：<code>SplitChunksPlugin</code> 分离公共依赖；</li><li>按需加载：使用 <code>import()</code> 动态导入路由组件；</li><li>压缩资源： <code>TerserPlugin</code> 压缩 JavaScript，<code>css-minimizer-webpack-plugin</code> 压缩CSS。</li></ul></li><li><p><strong>缓存策略</strong></p><ul><li>文件名哈希：<code>[name].[contenthash:8].js</code>（内容变化时哈希才更新）；</li><li>配置CDN：通过 <code>output.publicPath</code> 指向 CDN 地址加速加载。</li></ul></li></ol>`,18),n=[t];function r(d,c,p,h,u,k){return i(),a("div",null,n)}const f=e(o,[["render",r]]);export{m as __pageData,f as default};
