/* empty css                                                               */import{_ as e,c as a,o as t,aa as r}from"./chunks/framework.CeN9Tan-.js";const m=JSON.parse('{"title":"Vue 2 语法速览","description":"vue2 知识体系","frontmatter":{"description":"vue2 知识体系","layoutClass":"fuye-single-page-layout","outline":"deep"},"headers":[],"relativePath":"fe/vue2.md","filePath":"fe/vue2.md"}'),o={name:"fe/vue2.md"},l=r(`<h1 id="vue-2-语法速览" tabindex="-1">Vue 2 语法速览 <a class="header-anchor" href="#vue-2-语法速览" aria-label="Permalink to &quot;Vue 2 语法速览&quot;">​</a></h1><p>Vue 是一套用于构建用户界面的<strong>渐进式框架</strong>。Vue 2 已经终止支持且不再维护。 <a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">请升级到 Vue 3</a> 或了解有关 <a href="https://v2.cn.vuejs.org/eol/" target="_blank" rel="noreferrer">Vue 2 终止支持 (EOL)</a> 的信息。</p><p><a target="_blank" rel="noopener noreferrer" href="https://v2.cn.vuejs.org/?utm_source=jianghuliaoit" class="fuye-button medium brand">-&gt; 官网直达</a></p><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><ol><li><strong>实例</strong></li></ol><p>Vue 应用是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 选项对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>vm</code>：ViewModel 的缩写，这个变量名表示 Vue 实例，该实例叫 <strong>根 Vue 实例</strong>。</li><li>Vue 组件就是 Vue 实例。</li></ul><h2 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h2><p>组件可能被用来创建多个实例。</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="attribute-指令" tabindex="-1">attribute/指令 <a class="header-anchor" href="#attribute-指令" aria-label="Permalink to &quot;attribute/指令&quot;">​</a></h3><p>直接在组件上编写属性，如 <code>&lt;component attr=&quot;江湖聊IT&quot;&gt;&lt;/component&gt;</code> 中的 <code>attr</code>。</p><h4 id="key" tabindex="-1">key <a class="header-anchor" href="#key" aria-label="Permalink to &quot;key&quot;">​</a></h4><p>key 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。</p><ul><li>如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。</li><li>而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li></ul><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#key" target="_blank" rel="noreferrer">key</a> 的说明。</p><br><h4 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">​</a></h4><p>ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。</p><ul><li>如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；</li><li>如果用在子组件上，引用就指向组件实例：</li></ul><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#ref" target="_blank" rel="noreferrer">ref</a> 的说明。</p><br><h4 id="is" tabindex="-1">is <a class="header-anchor" href="#is" aria-label="Permalink to &quot;is&quot;">​</a></h4><p>用于动态组件且基于 DOM 内模板的限制来工作。</p><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#is" target="_blank" rel="noreferrer">is</a> 的说明。</p><br><h4 id="v-slot" tabindex="-1">v-slot <a class="header-anchor" href="#v-slot" aria-label="Permalink to &quot;v-slot&quot;">​</a></h4><p>v-slot 是 2.6.0 新增的。slot 和 slot-scope 已废弃。</p><p>用于将元素或组件表示为作用域插槽，标记往哪个具名插槽中插入子组件内容。</p><p>限用于 <code>&lt;template&gt;</code> 上。</p><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#v-slot" target="_blank" rel="noreferrer">v-slot</a> 的说明。</p><br><h4 id="v-model" tabindex="-1">v-model <a class="header-anchor" href="#v-model" aria-label="Permalink to &quot;v-model&quot;">​</a></h4><p>随表单控件在表单控件或者组件上创建双向绑定，型不同而不同。</p><p>v-model 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><div class="danger custom-block"><p class="custom-block-title">注意</p><p>v-model 会<strong>忽略</strong>所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p></div><p>v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p><ul><li><code>text</code> 和 <code>textarea</code> 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li><li><code>checkbox</code> 和 <code>radio</code> 使用 <code>checked</code> property 和 <code>change</code> 事件；</li><li><code>select</code> 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li></ul><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#v-model" target="_blank" rel="noreferrer">v-model</a> 、<a href="https://v2.cn.vuejs.org/v2/guide/forms.html" target="_blank" rel="noreferrer">表单输入绑定</a>的说明。</p><br><h4 id="v-bind" tabindex="-1">v-bind <a class="header-anchor" href="#v-bind" aria-label="Permalink to &quot;v-bind&quot;">​</a></h4><p>动态地绑定一个或多个 attribute，或一个组件 prop 到表达式。</p><p>缩写使用 <code>:</code>。</p><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#v-bind" target="_blank" rel="noreferrer">v-bind</a> 的说明。</p><br><h3 id="选项-数据" tabindex="-1">选项/数据 <a class="header-anchor" href="#选项-数据" aria-label="Permalink to &quot;选项/数据&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">注意</p><p>注意，不应该使用箭头函数来定义 <code>method</code>、<code>watch</code> 函数 (例如 <code>plus: () =&gt; this.a++)</code>。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，<code>this.a</code> 将是 <code>undefined</code>。</p></div><h4 id="data" tabindex="-1">data <a class="header-anchor" href="#data" aria-label="Permalink to &quot;data&quot;">​</a></h4><p>Vue 实例的数据对象，只接受 <code>function</code>。Vue 会递归地把 <code>data</code> 的 property 转换为 <code>getter/setter</code>，从而让 data 的 property 能够响应数据变化。</p><p>一旦观察过，你就无法在根数据对象上添加响应式 property。因此推荐在创建实例之前，就声明所有的根级响应式 property。</p><p>实例创建之后，可以通过 <code>vm.$data</code> 访问原始数据对象。Vue 实例也代理了 data 对象上所有的 property，因此访问 <code>vm.a</code> 等价于访问 <code>vm.$data.a</code>。</p><p>当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！</p><p>可以通过将 vm.$data 传入 <code>JSON.parse(JSON.stringify(...))</code> 得到深拷贝的原始数据对象。</p><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#data" target="_blank" rel="noreferrer">data</a> 的说明。</p><br><h4 id="props" tabindex="-1">props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;props&quot;">​</a></h4><p>用于接收来自父组件的数据，可以是数组或对象，对象允许配置高级选项，如类型检测、自定义验证和设置默认值。</p><p>对象的语法：</p><ul><li>type：可以是下列原生构造函数中的一种。</li><li>default：any。为该 prop 指定一个默认值。</li><li>required：Boolean。定义该 prop 是否是必填项。</li><li>validator：Function。自定义验证函数会将该 prop 的值作为唯一的参数代入。</li></ul><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#props" target="_blank" rel="noreferrer">props</a> 的说明。</p><br><h4 id="computed" tabindex="-1">computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed&quot;">​</a></h4><p>计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。</p><p>计算属性的结果会被缓存，除非依赖的响应式 property 变化才会重新计算。注意，如果某个依赖 (比如非响应式 property) 在该实例范畴之外，则计算属性是不会被更新的。</p><p>注意如果你为一个计算属性使用了箭头函数，则 this 不会指向这个组件的实例。</p><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#computed" target="_blank" rel="noreferrer">computed</a> 的说明。</p><br><h4 id="methods" tabindex="-1">methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;methods&quot;">​</a></h4><p>methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。</p><p>方法中的 this 自动绑定为 Vue 实例。</p><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#methods" target="_blank" rel="noreferrer">methods</a> 的说明。</p><br><h4 id="watch" tabindex="-1">watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;watch&quot;">​</a></h4><p>一个对象</p><ul><li>键是需要观察的表达式;</li><li>值是对应回调函数。值也可以是方法名，或者包含选项的对象。</li></ul><p>-&gt; 查看更多官网对 <a href="https://v2.cn.vuejs.org/v2/api/#watch" target="_blank" rel="noreferrer">watch</a> 的说明。</p><br><h2 id="选项-dom" tabindex="-1">选项/DOM <a class="header-anchor" href="#选项-dom" aria-label="Permalink to &quot;选项/DOM&quot;">​</a></h2><h2 id="el" tabindex="-1">#el <a class="header-anchor" href="#el" aria-label="Permalink to &quot;#el&quot;">​</a></h2><p>提供一个在页面上已经存在的 DOM 元素作为 Vue 实例的挂载目标，在实例挂载之后，元素可以用 <code>vm.$el</code> 访问。</p><h2 id="选项-生命周期钩子" tabindex="-1">选项/生命周期钩子 <a class="header-anchor" href="#选项-生命周期钩子" aria-label="Permalink to &quot;选项/生命周期钩子&quot;">​</a></h2><p>所有生命周期钩子的 <code>this</code> 上下文将自动绑定至实例中，因此你可以访问 data、computed 和 methods。这意味着你不应该使用箭头函数来定义一个生命周期方法 (例如 <code>created: () =&gt; this.fetchTodos()</code>)。因为箭头函数绑定了父级上下文，所以 <code>this</code> 不会指向预期的组件实例。</p><p>create: 是实例创建。</p><ul><li><code>beforeCreate</code>: <ul><li>实例初始化已经完成，负责<strong>数据侦听和事件/侦听器</strong>的配置之前同步调用。</li><li>实例还未创建创建。</li></ul></li><li>created： <ul><li>此时实例已经创建完成</li><li>但还没有挂载，所以 <code>$el</code> 还没有被定义。</li></ul></li></ul><h2 id="选项资源" tabindex="-1">选项资源 <a class="header-anchor" href="#选项资源" aria-label="Permalink to &quot;选项资源&quot;">​</a></h2><h2 id="选项组合" tabindex="-1">选项组合 <a class="header-anchor" href="#选项组合" aria-label="Permalink to &quot;选项组合&quot;">​</a></h2><h2 id="选项-其他" tabindex="-1">选项/其他 <a class="header-anchor" href="#选项-其他" aria-label="Permalink to &quot;选项/其他&quot;">​</a></h2><h2 id="内置指令" tabindex="-1">内置指令 <a class="header-anchor" href="#内置指令" aria-label="Permalink to &quot;内置指令&quot;">​</a></h2><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><h2 id="全局配置" tabindex="-1">全局配置 <a class="header-anchor" href="#全局配置" aria-label="Permalink to &quot;全局配置&quot;">​</a></h2><h2 id="全局-api" tabindex="-1">全局 API <a class="header-anchor" href="#全局-api" aria-label="Permalink to &quot;全局 API&quot;">​</a></h2><h2 id="风格指南" tabindex="-1">风格指南 <a class="header-anchor" href="#风格指南" aria-label="Permalink to &quot;风格指南&quot;">​</a></h2>`,93),i=[l];function s(d,n,h,p,c,u){return t(),a("div",null,i)}const k=e(o,[["render",s]]);export{m as __pageData,k as default};
