/* empty css                                                               */import{_ as s,c as i,o as a,aa as e}from"./chunks/framework.CeN9Tan-.js";const u=JSON.parse('{"title":"Webpack Loader","description":null,"frontmatter":{"description":null,"layoutClass":"fuye-single-page-layout","outline":[2,3,4]},"headers":[],"relativePath":"tech/fe/webpack-loader.md","filePath":"tech/fe/webpack-loader.md"}'),n={name:"tech/fe/webpack-loader.md"},l=e(`<h1 id="webpack-loader" tabindex="-1">Webpack Loader <a class="header-anchor" href="#webpack-loader" aria-label="Permalink to &quot;Webpack Loader&quot;">​</a></h1><h2 id="什么是-webpack-loader" tabindex="-1">什么是 Webpack Loader？ <a class="header-anchor" href="#什么是-webpack-loader" aria-label="Permalink to &quot;什么是 Webpack Loader？&quot;">​</a></h2><p><code>Loader</code>（加载器） 是 <code>Webpack</code> 处理非 <code>JavaScript</code> 文件 的工具，将文件转换为 <code>Webpack</code> 能识别的模块（如将 <code>CSS</code> 转换为 <code>JavaScript</code> 字符串，图片转为 <code>Base64</code> 或文件路径）。</p><p><strong>本质</strong>是一个函数（或模块），接收源文件内容，返回处理后的结果。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：一个简单的 Loader，将内容转为大写 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="loader-核心用途" tabindex="-1">Loader 核心用途 <a class="header-anchor" href="#loader-核心用途" aria-label="Permalink to &quot;Loader 核心用途&quot;">​</a></h2><ol><li><p><strong>转译代码</strong></p><ul><li>如 <code>Babel</code> 将 <code>ES6+</code> 代码转为 <code>ES5</code>。</li></ul></li><li><p><strong>处理静态资源</strong></p><ul><li><code>CSS</code>、图片、字体等转为 <code>JavaScript</code> 可引用的形式。</li></ul></li><li><p><strong>代码校验与格式化</strong></p><ul><li>如 <code>ESLint</code> 检查代码规范。</li></ul></li><li><p><strong>模板处理</strong></p><ul><li>如 <code>HTML</code> 模板中插入动态变量。</li></ul></li></ol><h2 id="常用-loader-分类与示例" tabindex="-1">常用 Loader 分类与示例 <a class="header-anchor" href="#常用-loader-分类与示例" aria-label="Permalink to &quot;常用 Loader 分类与示例&quot;">​</a></h2><table><thead><tr><th><div style="width:120px;">类型</div></th><th><div style="width:120px;">常用 Loader</div></th><th>用途</th><th>配置示例</th></tr></thead><tbody><tr><td>JavaScript 转译</td><td><code>babel-loader</code></td><td>转换 <code>ES6+</code>、<code>TypeScript</code> 等</td><td><code>{ test: /\\.js$/, use: [&#39;babel-loader&#39;], exclude: /node_modules/ }</code></td></tr><tr><td>样式处理</td><td><code>style-loader</code> +<br><code>css-loader</code></td><td>将 <code>CSS</code> 注入 <code>JavaScript</code>，解析 <code>@import</code> 和 <code>url()</code></td><td><code>use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</code></td></tr><tr><td>预处理器</td><td><code>sass-loader</code> /<br><code>less-loader</code></td><td>编译 <code>Sass/Less</code> 为 <code>CSS</code></td><td><code>use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;sass-loader&#39;]</code></td></tr><tr><td>文件处理</td><td><code>file-loader</code> /<br><code>url-loader</code></td><td>处理图片、字体，<code>url-loader</code> 支持 <code>Base64</code></td><td><code>test: /\\.png$/, use: [ { loader: &#39;file-loader&#39;} ]</code></td></tr><tr><td>代码校验</td><td><code>eslint-loader</code></td><td>代码规范检查</td><td><code>{ test: /\\.js$/, use: [&#39;eslint-loader&#39;], enforce: &#39;pre&#39; }</code></td></tr><tr><td>模板处理</td><td><code>html-loader</code></td><td>处理 <code>HTML</code> 中的资源路径（如 <code>&lt;img src&gt;</code> ）</td><td><code>{ test: /\\.html$/, use: &#39;html-loader&#39; }</code></td></tr></tbody></table><h2 id="如何配置-loader" tabindex="-1">如何配置 Loader？ <a class="header-anchor" href="#如何配置-loader" aria-label="Permalink to &quot;如何配置 Loader？&quot;">​</a></h2><p>在 <code>webpack.config.js</code> 的 <code>module.rules</code> 中定义规则：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配文件类型 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用的 Loader 数组 </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 顺序从后往前执行（或从下到上） </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options: { modules : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置选项 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ], </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        exclude:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 排除目录 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>关键属性</strong>：</p><ul><li><strong>test</strong>：正则匹配文件扩展名（如 <code>/\\.js$/</code> ）；</li><li><strong>use</strong>：指定 <code>Loader</code>，支持字符串或对象形式（可传参）；</li><li><strong>exclude/include</strong>：缩小处理范围，提升构建速度；</li><li><strong>enforce: &#39;pre&#39;</strong>：强制在其它 <code>Loader</code> 前执行（如 <code>ESLint</code>）。</li></ul><h2 id="loader-的工作原理" tabindex="-1">Loader 的工作原理 <a class="header-anchor" href="#loader-的工作原理" aria-label="Permalink to &quot;Loader 的工作原理&quot;">​</a></h2><ol><li><p><strong>链式处理</strong></p><ul><li><code>Loader</code> 从右到左（或从下到上）依次执行，前一个 <code>Loader</code> 的输出作为下一个的输入。</li></ul></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 先执行 css-loader，再 style-loader</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><p><strong>同步与异步</strong></p><ul><li>默认<strong>同步</strong>执行，可通过 <code>this.async()</code> 返回异步回调。</li></ul></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  someAsyncTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err, result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="3"><li><p><strong>Pitching 阶段</strong></p><ul><li><code>Loader</code> 的 <code>pitch</code> 方法在<strong>实际执行前</strong>被调用，可用于跳过后续 <code>Loader</code>。</li></ul></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pitch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">remainingRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (shouldSkip) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;module.exports = &quot;Skipped&quot;;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="其他注意点" tabindex="-1">其他注意点 <a class="header-anchor" href="#其他注意点" aria-label="Permalink to &quot;其他注意点&quot;">​</a></h2><ol><li><p><strong><code>Loader</code> 与 <code>Plugin</code> 的区别</strong></p><ul><li><code>Loader</code> 处理<strong>单个文件</strong>，<code>Plugin</code> 在<strong>构建流程</strong>中扩展功能（如压缩代码）。</li></ul></li><li><p><strong>自定义 Loader</strong></p><ul><li>可通过 <code>resolveLoader</code> 配置自定义 <code>Loader</code> 路径：</li></ul></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolveLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./my-loaders&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li><p><strong>性能优化</strong></p><ul><li>使用 <code>exclude/include</code> 减少不必要的文件处理；</li><li>缓存 <code>Loader</code> 结果（如 <code>cache-loader</code> 或 <code>babel-loader?cacheDirectory=true</code> ）；</li></ul></li><li><p><strong>兼容性</strong></p><ul><li>注意 <code>Loader</code> 版本与 <code>Webpack</code> 的兼容性（如 <code>Webpack5</code> 废弃了 <code>url-loader</code> ，推荐使用 <code>Asset Modules</code>）。</li></ul></li></ol>`,25),t=[l];function d(p,r,h,o,k,c){return a(),i("div",null,t)}const b=s(n,[["render",d]]);export{u as __pageData,b as default};
