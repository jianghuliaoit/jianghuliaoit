/* empty css                                                               */import{_ as t,c as a,o as i,aa as e}from"./chunks/framework.CeN9Tan-.js";const f=JSON.parse('{"title":"设计模式","description":null,"frontmatter":{"description":null,"layoutClass":"fuye-single-page-layout","outline":[2,3,4]},"headers":[],"relativePath":"computer-basic/design-patterns/index.md","filePath":"computer-basic/design-patterns/index.md"}'),l={name:"computer-basic/design-patterns/index.md"},r=e('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h1><p>设计模式代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。</p><h2 id="面向对象的-javascript" tabindex="-1">面向对象的 JavaScript <a class="header-anchor" href="#面向对象的-javascript" aria-label="Permalink to &quot;面向对象的 JavaScript&quot;">​</a></h2><p>在 JavaScript 中，没有提供传统<strong>面向对象语言</strong>中的类式继承，而是通过<strong>原型委托</strong>的方式来实现对象与对象之间的继承。</p><h3 id="编程语言类型" tabindex="-1">编程语言类型 <a class="header-anchor" href="#编程语言类型" aria-label="Permalink to &quot;编程语言类型&quot;">​</a></h3><p>编程语言类型可分为：静态类型语言和动态类型语言。</p><ul><li><strong>静态类型语言</strong>：在<strong>编译时</strong>，已经确定变量的类型，如：Java、C、C++、C#。</li><li><strong>动态类型语言</strong>：在<strong>程序运行时</strong>，待变量被赋值后，才确定其类型，如：JavaScript、Ruby、PHP。</li></ul><p>优缺点说明：</p><table><thead><tr><th>类型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>静态类型语言</td><td><ol><li>编译时就能发现大部分错误，提高开发效率。</li><li>类型明确，代码可读性好。</li><li>编译器可以为类型做优化，提高程序运行效率</li></ol></td><td><ol><li>编译时间长。</li><li>类型转换不够灵活。</li><li>对动态类型语言的支持不够好。</li></ol></td></tr></tbody></table><h2 id="设计模式分类" tabindex="-1">设计模式分类 <a class="header-anchor" href="#设计模式分类" aria-label="Permalink to &quot;设计模式分类&quot;">​</a></h2><ul><li>创建型设计模式 <ul><li><a href="./singleton">单例模式</a></li><li><a href="./factory-method">工厂方法模式</a></li><li><a href="./abstract-factory">抽象工厂模式</a></li><li>建造者模式</li><li>原型模式</li></ul></li><li>结构型设计模式</li><li>行为型设计模式</li></ul>',11),o=[r];function n(s,d,c,h,p,u){return i(),a("div",null,o)}const m=t(l,[["render",n]]);export{f as __pageData,m as default};
