/* empty css                                                               */import{_ as s,c as i,o as e,aa as a}from"./chunks/framework.CeN9Tan-.js";const m=JSON.parse('{"title":"Tree Shaking","description":null,"frontmatter":{"description":null,"layoutClass":"fuye-single-page-layout","outline":[2,3,4]},"headers":[],"relativePath":"tech/fe/tree-shaking.md","filePath":"tech/fe/tree-shaking.md"}'),l={name:"tech/fe/tree-shaking.md"},n=a(`<h1 id="tree-shaking" tabindex="-1">Tree Shaking <a class="header-anchor" href="#tree-shaking" aria-label="Permalink to &quot;Tree Shaking&quot;">​</a></h1><p>Tree-shaking （摇树优化）是一种通过静态分析消除 JavaScript 代码中未使用部分的技术，旨在减少最终构建产物体积，提升加载速度和运行效率。其名称源自“摇晃树干使枯叶掉落”的比喻，核心思想是去除未被引用的“死代码”（Dead Code）。</p><h2 id="tree-shaking-的作用" tabindex="-1">Tree-shaking 的作用 <a class="header-anchor" href="#tree-shaking-的作用" aria-label="Permalink to &quot;Tree-shaking 的作用&quot;">​</a></h2><ol><li><p><strong>减少打包体积</strong></p><ul><li>通过删除未使用的模块、函数或变量（如第三方库中未被调用的方法），显著缩小代码体积；</li></ul></li><li><p><strong>优化性能</strong></p><ul><li>减少网络传输时间和内存占用，提升页面加载速度，尤其对移动端和低带宽环境效果明显；</li></ul></li><li><p><strong>支持按需加载</strong></p><ul><li>结合模块化开发，实现按需引入功能（如仅导入组件库中的特定组件）；</li></ul></li><li><p><strong>生产环境优化</strong></p><ul><li>在 Webpack 生产模式（<code>mode: &#39;production&#39;</code>）下默认启用，结合代码压缩工具（如 <code>Terser</code>）进一步优化。</li></ul></li></ol><h2 id="tree-shaking-的工作原理" tabindex="-1">Tree-shaking 的工作原理 <a class="header-anchor" href="#tree-shaking-的工作原理" aria-label="Permalink to &quot;Tree-shaking 的工作原理&quot;">​</a></h2><ol><li><p><strong>静态分析依赖关系</strong></p><ul><li><strong>基于 ES Module</strong>：ES6 模块的导入（<code>import</code>）和导出（<code>export</code>）是静态的，依赖关系在编译时即可确定，支持可靠的分析。</li><li><strong>构建依赖树</strong>：从入口文件出发，解析所有模块的依赖关系，形成<a href="./../computer-basic/ast">抽象语法树（AST）</a>。</li></ul></li><li><p><strong>标记未使用代码</strong></p><ul><li>通过工具（如 Webpack）标记未被引用的导出项（如函数、变量），如添加 <code>/* unused harmony export */</code> 注释。</li></ul></li><li><p><strong>删除死代码</strong></p><ul><li>结合压缩工具（如 <code>Terser</code>、<code>UglifyJS</code>）将标记的代码从最终产物中移除。</li></ul></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例 utils.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 被标记为未使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 被使用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打包后仅保留 function b() {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="tree-shaking-的注意事项" tabindex="-1">Tree-shaking 的注意事项 <a class="header-anchor" href="#tree-shaking-的注意事项" aria-label="Permalink to &quot;Tree-shaking 的注意事项&quot;">​</a></h2><ol><li><p><strong>必须使用 ES Module 语法</strong></p><ul><li>CommonJS（如 <code>require / module.exports</code> ）因动态依赖特性无法被静态分析，Tree-shaking 仅对 ES Module 有效。</li></ul></li><li><p><strong>避免副作用代码（Side Effects）</strong></p><ul><li>副作用代码（如修改全局变量、执行立即函数）可能被误删，需通过 <code>package.json</code> 的 <code>&quot;sideEffects&quot;</code> 字段标注： <ul><li>false：所有文件无副作用，可安全删除未使用代码。</li><li>[&quot;*.css&quot;]：指定含副作用的文件（如 CSS 导入）。</li></ul></li></ul></li><li><p><strong>配置 Babel 避免破坏 ES Module</strong></p><ul><li>Babel 默认将 ES Module 转换为 CommonJS，需设置 <code>preset-env</code> 的 <code>modules: false</code> 保留原始语法。</li></ul></li><li><p><strong>生产环境优化</strong></p><ul><li>Webpack 需配置 <code>mode: &#39;production&#39;</code> 以启用压缩和 Tree-shaking。</li></ul></li><li><p><strong>第三方库的兼容性</strong></p><ul><li>确保第三方库使用 ES Module 导出（如 Lodash 的 ESM 版本 <code>lodash-es</code>）。</li></ul></li></ol><h2 id="tree-shaking-的局限性" tabindex="-1">Tree-shaking 的局限性 <a class="header-anchor" href="#tree-shaking-的局限性" aria-label="Permalink to &quot;Tree-shaking 的局限性&quot;">​</a></h2><ol><li><p><strong>动态导入无法分析</strong></p><ul><li>如 <code>import()</code> 动态加载的模块需结合代码分割（Code Splitting）优化。</li></ul></li><li><p><strong>默认导出对象难以优化</strong></p></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 无法判断对象中哪些属性被使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , b : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li><p><strong>无法处理运行时依赖</strong></p><ul><li>如通过字符串拼接生成的模块路径（如 <code>require(&#39;module/&#39; + path)</code> ）。</li></ul></li></ol>`,13),t=[n];function o(r,p,h,d,c,k){return e(),i("div",null,t)}const b=s(l,[["render",o]]);export{m as __pageData,b as default};
